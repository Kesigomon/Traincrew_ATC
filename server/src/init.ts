import {Direction, Prisma, PrismaClient, SignalType, StationStatus} from '@prisma/client';

const signals = [
  // 館浜
  '館浜上り出発1R',
  '館浜上り出発2R',
  '館浜上り出発3R',
  '館浜上り出発4R',
  '上り閉塞6',
  '上り閉塞8',
  // 駒野
  '駒野入換110R',
  '駒野上り場内1RA',
  '駒野上り場内1RB',
  '駒野上り場内2RA',
  '駒野上り場内2RB',
  '駒野上り出発3R',
  '駒野上り出発4R',
  '上り閉塞26',
  '上り閉塞30',
  '上り閉塞36',
  '上り閉塞42',
  '上り閉塞48',
  '上り閉塞56',
  '上り閉塞62',
  '上り閉塞68',
  '上り閉塞74',
  // 津崎
  '津崎上り場内1RA',
  '津崎上り場内1RB',
  '津崎上り出発2R',
  '津崎上り出発3R',
  '上り閉塞86',
  '上り閉塞92',
  // 浜園
  '浜園上り場内1R',
  '浜園上り出発2R',
  '浜園入換102R',
  '上り閉塞102',
  '上り閉塞108',
  '上り閉塞114',
  '上り閉塞120',
  '上り閉塞124',
  // 新野崎
  '新野崎上り場内1RA',
  '新野崎上り場内1RB',
  '新野崎上り出発11R',
  '新野崎上り出発12R',
  '新野崎入換111R',
  '上り閉塞136',
  '上り閉塞142',
  '上り閉塞146',
  // 江ノ原
  '江ノ原検車区上り場内1RA',
  '江ノ原検車区上り場内1RB',
  '江ノ原検車区上り場内1RC',
  '江ノ原検車区上り出発2R',
  '上り閉塞156',
  // 大道寺
  '大道寺上り場内1RA', // 1番線
  '大道寺上り場内1RB', // 2番線
  '大道寺上り場内1RC', // 3番線
  '大道寺上り場内2R', // 1番線
  '大道寺上り場内3R', // 2番線
  '大道寺上り場内8R', // 3番線
  '大道寺入換105R',
  '大道寺入換110R',
  // 下り
  // 大道寺
  '大道寺入換103L',
  '大道寺入換104L',
  '大道寺入換110L',
  '大道寺入換112L',
  '大道寺下り出発1L',
  '大道寺下り出発2L',
  // 江ノ原信号場
  '江ノ原検車区下り出発2L',
  '江ノ原検車区下り出発3L',
  '江ノ原検車区下り場内1LA',
  '江ノ原検車区下り場内1LB',
  '下り閉塞151',
  '下り閉塞145',
  '下り閉塞143',
  '下り閉塞137',
  // 新野崎
  '新野崎入換101L',
  '新野崎入換104L',
  '新野崎下り場内5LA',
  '新野崎下り場内5LB',
  '新野崎下り場内3L',
  '新野崎下り場内4L',
  '新野崎下り出発1L',
  '新野崎下り出発2L',
  '下り閉塞123',
  '下り閉塞117',
  '下り閉塞111',
  '下り閉塞105',
  '下り閉塞103',
  // 浜園
  '浜園入換101L',
  '浜園下り場内2L',
  '浜園下り出発1L',
  '下り閉塞89',
  // 津崎
  '津崎下り場内3LA',
  '津崎下り場内3LB',
  '津崎下り出発1L',
  '津崎下り出発2L',
  '下り閉塞75',
  '下り閉塞71',
  '下り閉塞67',
  '下り閉塞59',
  '下り閉塞55',
  '下り閉塞49',
  '下り閉塞45',
  '下り閉塞41',
  '下り閉塞35',
  '下り閉塞27',
  // 駒野
  '駒野下り場内11LA',
  '駒野下り出発1L',
  '駒野下り出発2L',
  '駒野下り出発4L',
  '下り閉塞9',
  '下り閉塞7',
  // 館浜
  '館浜下り場内1LA',
  '館浜下り場内1LB',
  '館浜下り場内1LC',
  '館浜下り場内1LD',
  '館浜1番線',
  '館浜2番線',
  '館浜3番線',
  '館浜4番線',
] as const;

type SignalNames = typeof signals[number];

const nextSignals = new Map<SignalNames, SignalNames[]>([
  // 上り
  ['館浜上り出発1R', ['上り閉塞6']],
  ['館浜上り出発2R', ['上り閉塞6']],
  ['館浜上り出発3R', ['上り閉塞6']],
  ['館浜上り出発4R', ['上り閉塞6']],
  ['上り閉塞8', ['駒野上り場内1RA', '駒野上り場内1RB']],
  ['駒野上り場内1RA', ['駒野上り場内2RA', '駒野上り場内2RB']],
  ['駒野上り場内2RA', ['駒野上り出発4R']],
  ['駒野上り場内2RB', ['駒野上り出発3R']],
  ['駒野上り出発3R', ['上り閉塞26']],
  ['駒野上り出発4R', ['上り閉塞26']],
  ['上り閉塞74', ['津崎上り場内1RA', '津崎上り場内1RB']],
  ['津崎上り場内1RA', ['津崎上り出発3R']],
  ['津崎上り場内1RB', ['津崎上り出発2R']],
  ['津崎上り出発2R', ['上り閉塞86']],
  ['津崎上り出発3R', ['上り閉塞86']],
  ['上り閉塞92', ['浜園上り場内1R']],
  ['浜園上り場内1R', ['浜園上り出発2R']],
  ['浜園上り出発2R', ['上り閉塞102']],
  ['上り閉塞124', ['新野崎上り場内1RA', '新野崎上り場内1RB']],
  ['新野崎上り場内1RA', ['新野崎上り出発12R']],
  ['新野崎上り場内1RB', ['新野崎上り出発11R']],
  ['新野崎上り出発11R', ['上り閉塞136']],
  ['新野崎上り出発12R', ['上り閉塞136']],
  ['上り閉塞146', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC']],
  ['江ノ原検車区上り場内1RA', ['上り閉塞156']],
  ['上り閉塞156', ['大道寺上り場内1RA', '大道寺上り場内1RB', '大道寺上り場内1RC']],
  ['大道寺上り場内1RA', ['大道寺上り場内2R']],
  ['大道寺上り場内1RB', ['大道寺上り場内3R']],
  ['大道寺上り場内1RC', ['大道寺上り場内8R']],
  ['大道寺入換105R', ['大道寺入換110R']],
  // 下り
  ['大道寺入換112L', ['大道寺入換110L']],
  ['大道寺入換110L', ['大道寺入換104L', '大道寺入換103L']],
  ['大道寺下り出発1L', ['江ノ原検車区下り場内1LA', '江ノ原検車区下り場内1LB']],
  ['大道寺下り出発2L', ['江ノ原検車区下り場内1LA', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区下り出発2L', ['下り閉塞151']],
  ['江ノ原検車区下り出発3L', ['下り閉塞151']],
  ['江ノ原検車区下り場内1LA', ['下り閉塞151']],
  ['下り閉塞137', ['新野崎下り場内5LA', '新野崎下り場内5LB']],
  ['新野崎下り場内5LA', ['新野崎下り場内3L']],
  ['新野崎下り場内5LB', ['新野崎下り場内4L']],
  ['新野崎下り場内3L', ['新野崎下り出発1L']],
  ['新野崎下り場内4L', ['新野崎下り出発2L']],
  ['新野崎下り出発1L', ['下り閉塞123']],
  ['新野崎下り出発2L', ['下り閉塞123']],
  ['下り閉塞103', ['浜園下り場内2L']],
  ['浜園下り場内2L', ['浜園下り出発1L']],
  ['浜園下り出発1L', ['下り閉塞89']],
  ['下り閉塞89', ['津崎下り場内3LA', '津崎下り場内3LB']],
  ['津崎下り場内3LA', ['津崎下り出発1L']],
  ['津崎下り場内3LB', ['津崎下り出発2L']],
  ['津崎下り出発1L', ['下り閉塞75']],
  ['津崎下り出発2L', ['下り閉塞75']],
  ['下り閉塞27', ['駒野下り場内11LA']],
  ['駒野下り場内11LA', ['駒野下り出発2L']],
  ['駒野下り出発2L', ['駒野下り出発1L']],
  ['駒野下り出発1L', ['下り閉塞9']],
  ['駒野下り出発4L', ['下り閉塞9']],
  ['下り閉塞7', ['館浜下り場内1LA', '館浜下り場内1LB', '館浜下り場内1LC', '館浜下り場内1LD']],
  ['館浜下り場内1LA', ['館浜1番線']],
  ['館浜下り場内1LB', ['館浜2番線']],
  ['館浜下り場内1LC', ['館浜3番線']],
  ['館浜下り場内1LD', ['館浜4番線']],
]);

const nextEnterSignals = new Map<SignalNames, SignalNames[]>([
  // 館浜
  ['館浜上り出発1R', ['館浜上り出発2R', '館浜上り出発3R', '館浜上り出発4R', '館浜下り場内1LA']],
  ['館浜上り出発2R', ['館浜上り出発1R', '館浜上り出発3R', '館浜上り出発4R', '館浜下り場内1LA', '館浜下り場内1LB']],
  ['館浜上り出発3R', ['館浜上り出発1R', '館浜上り出発2R', '館浜上り出発4R', '館浜下り場内1LA', '館浜下り場内1LB', '館浜下り場内1LC']],
  ['館浜上り出発4R', ['館浜上り出発1R', '館浜上り出発2R', '館浜上り出発3R', '館浜下り場内1LA', '館浜下り場内1LB', '館浜下り場内1LC', '館浜下り場内1LD']],
  // 駒野
  ['駒野入換110R', ['駒野上り場内2RB', '駒野上り出発3R']],
  ['駒野上り場内1RA', ['駒野上り場内1RB', '駒野下り出発4L']],
  ['駒野上り場内1RB', ['駒野上り場内1RA', '駒野下り出発4L']],
  ['駒野上り場内2RA', ['駒野入換110R', '駒野上り場内2RB']],
  ['駒野上り場内2RB', ['駒野上り場内2RA', '駒野上り出発3R']],
  ['駒野上り出発3R', ['駒野入換110R', '駒野上り場内2RB', '駒野上り出発4R']],
  ['駒野上り出発4R', ['駒野上り出発3R']],
  // 津崎
  ['津崎上り場内1RA', ['津崎上り場内1RB']],
  ['津崎上り場内1RB', ['津崎上り場内1RA', '津崎上り出発2R']],
  ['津崎上り出発2R', ['津崎上り出発3R', '津崎上り場内1RB']],
  ['津崎上り出発3R', ['津崎上り出発2R']],
  // 浜園
  ['浜園上り出発2R', ['浜園入換102R']],
  ['浜園入換102R', ['浜園上り出発2R']],
  // 新野崎
  ['新野崎上り場内1RA', ['新野崎上り場内1RB']],
  ['新野崎上り場内1RB', ['新野崎上り場内1RA', '新野崎入換111R']],
  ['新野崎上り出発11R', ['新野崎上り出発12R', '新野崎入換111R', '新野崎入換101L']],
  ['新野崎上り出発12R', ['新野崎上り出発11R', '新野崎入換101L']],
  ['新野崎入換111R', ['新野崎上り場内1RB', '新野崎上り出発11R', '新野崎入換101L']],
  // 江ノ原
  ['江ノ原検車区上り場内1RA', ['江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC', '江ノ原検車区上り出発2R', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区上り場内1RB', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RC', '江ノ原検車区上り出発2R', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区上り場内1RC', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り出発2R', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区上り出発2R', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L']],
  // 大道寺
  ['大道寺上り場内1RA', ['大道寺上り場内1RB', '大道寺上り場内1RC']],
  ['大道寺上り場内1RB', ['大道寺上り場内1RA', '大道寺上り場内1RC']],
  ['大道寺上り場内1RC', ['大道寺上り場内1RA', '大道寺上り場内1RB']],
  ['大道寺上り場内3R', ['大道寺入換105R']],
  ['大道寺上り場内8R', ['大道寺下り出発1L', '大道寺入換103L']],
  ['大道寺入換105R', ['大道寺入換110L', '大道寺入換112L']],
  ['大道寺入換110R', ['大道寺入換112L']],
  // 下り
  // 大道寺
  ['大道寺入換103L', ['大道寺上り場内8R', '大道寺下り出発1L']],
  ['大道寺入換104L', ['大道寺下り出発2L']],
  ['大道寺入換110L', ['大道寺入換105R']],
  ['大道寺入換112L', ['大道寺入換105R', '大道寺入換110R']],
  ['大道寺下り出発1L', ['大道寺上り場内8R', '大道寺下り出発2L']],
  ['大道寺下り出発2L', ['大道寺下り出発1L']],
  // 江ノ原信号場
  ['江ノ原検車区下り出発2L', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC', '江ノ原検車区上り出発2R', '江ノ原検車区下り出発3L', '江ノ原検車区下り場内1LA', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区下り出発3L', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC', '江ノ原検車区上り出発2R', '江ノ原検車区下り出発2L', '江ノ原検車区下り場内1LA', '江ノ原検車区下り場内1LB']],
  ['江ノ原検車区下り場内1LA', ['江ノ原検車区下り場内1LB', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L']],
  ['江ノ原検車区下り場内1LB', ['江ノ原検車区上り場内1RA', '江ノ原検車区上り場内1RB', '江ノ原検車区上り場内1RC', '江ノ原検車区下り場内1LA', '江ノ原検車区下り出発2L', '江ノ原検車区下り出発3L']],
  // 新野崎
  ['新野崎入換101L', ['新野崎上り出発11R', '新野崎上り出発12R', '新野崎入換111R', '新野崎下り場内5LA', '新野崎下り場内5LB', '新野崎下り場内4L', '新野崎下り出発2L']],
  ['新野崎入換104L', ['新野崎下り場内4L', '新野崎下り出発2L']],
  ['新野崎下り場内5LA', ['新野崎入換101L', '新野崎下り場内5LB']],
  ['新野崎下り場内5LB', ['新野崎入換101L', '新野崎下り場内5LA']],
  ['新野崎下り場内4L', ['新野崎入換104L', '新野崎下り出発2L']],
  ['新野崎下り出発1L', ['新野崎下り出発2L']],
  ['新野崎下り出発2L', ['新野崎入換101L', '新野崎入換104L', '新野崎下り場内4L', '新野崎下り出発1L']],
  // 浜園
  ['浜園入換101L', ['浜園下り場内2L', '浜園下り出発1L']],
  ['浜園下り場内2L', ['浜園入換101L']],
  ['浜園下り出発1L', ['浜園入換101L']],
  // 津崎
  ['津崎下り場内3LA', ['津崎下り場内3LB']],
  ['津崎下り場内3LB', ['津崎下り場内3LA', '津崎下り出発2L']],
  ['津崎下り出発1L', ['津崎下り出発2L']],
  ['津崎下り出発2L', ['津崎下り場内3LB', '津崎下り出発1L']],
  // 駒野
  ['駒野下り出発2L', ['駒野下り出発4L']],
  ['駒野下り出発4L', ['駒野上り場内1RA', '駒野上り場内1RB', '駒野下り出発2L']],
  // 館浜
  ['館浜下り場内1LA', ['館浜上り出発1R', '館浜上り出発2R', '館浜上り出発3R', '館浜上り出発4R', '館浜下り場内1LB', '館浜下り場内1LC', '館浜下り場内1LD', '館浜1番線']],
  ['館浜下り場内1LB', ['館浜上り出発2R', '館浜上り出発3R', '館浜上り出発4R', '館浜下り場内1LA', '館浜下り場内1LC', '館浜下り場内1LD', '館浜2番線']],
  ['館浜下り場内1LC', ['館浜上り出発3R', '館浜上り出発4R', '館浜下り場内1LA', '館浜下り場内1LB', '館浜下り場内1LD', '館浜3番線']],
  ['館浜下り場内1LD', ['館浜上り出発4R', '館浜下り場内1LA', '館浜下り場内1LB', '館浜下り場内1LC', '館浜4番線']],
])

const calcDirection = (name: string) => {
  /*
  if (name.includes('上り') || name.includes('R')) {
    return Direction.UP;
  }

   */
  if (name.includes('下り') || name.includes('L')) {
    return Direction.DOWN;
  }
  return Direction.UP;
}

const calcSignalType = (name: string) => {
  if (name == '下り閉塞7') {
    return SignalType.THREE_A;
  }
  if (name === '新野崎下り場内3L') {
    return SignalType.FIVE;
  }
  if (name.includes('入換')) {
    return SignalType.TWO_B;
  }
  if (name.includes('館浜下り場内')) {
    return SignalType.TWO_A;
  }
  if (name.includes('場内') && name[name.length - 1] !== 'A') {
    return SignalType.TWO_A;
  }
  if (name.includes('館浜') && name.includes('番線')) {
    return SignalType.ONE;
  }
  return SignalType.FOUR_B;
}

const calcNextSignalData = () => {
  const result: Prisma.NextSignalCreateManyInput[] = [];
  signals.forEach((name, index, array) => {
    const nextSignalNames = nextSignals.get(name) || [];
    if (name.includes('閉塞') && (index < array.length - 1 && array[index + 1].includes('閉塞'))) {
      nextSignalNames.push(array[index + 1]);
    }
    nextSignalNames.forEach(nextSignalName => {
      result.push({
        signalName: name,
        nextSignalName
      });
    });
  });
  return result;
}

const calcNextEnterSignalData = () => {
  return signals.flatMap((name) => {
    const nextEnterSignalNames = nextEnterSignals.get(name) || [];
    return nextEnterSignalNames.map((nextSignalName) => (
        {signalName: name, nextSignalName}
    ));
  });
}


const main = async () => {
  const prisma = new PrismaClient();
  let order = 1;
  const signalData = signals.map((name, index, array) => {
    const isClosure = name.includes('閉塞');
    if (isClosure || (index >= 1 && array[index - 1].includes('閉塞'))) {
      order += 1;
    }
    const direction = calcDirection(name);
    if (direction === Direction.DOWN && (index >= 1 && calcDirection(array[index - 1]) === Direction.UP)) {
      order = 1;
    }
    const type = calcSignalType(name);
    const stationStatus = StationStatus.ROUTE_CLOSED;
    return {
      name,
      order,
      direction,
      type,
      isClosure,
      stationStatus,
    }
  });

  await prisma.nextEnterSignal.deleteMany();
  await prisma.nextSignal.deleteMany();
  await prisma.signal.deleteMany();
  await prisma.signal.createMany({
    data: signalData,
  });
  await prisma.nextSignal.createMany({data: calcNextSignalData()});
  await prisma.nextEnterSignal.createMany({data: calcNextEnterSignalData()});
};

main().then(r => r).catch(e => console.error(e));